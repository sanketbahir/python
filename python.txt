*indentation 
*exit() => use this function for exit form  the code .
.# => using we can commit the line 
""" => using tripple line string  we can commit the more than one line """
variable are case sensitive they will not  over write each  other 

=============================================================================================================================================

*rules for python variables
1) must start with letter or underscore character
2) can not  start with a number
3) varibels names are case-sensitive 
4) names can not be any python keywords

=============================================================================================================================================

*unpack a list =>
fruits = ["apple","banana","cherry"]
x,y,z  = fruits
print(x) 
print(y) 
print(z) 

=============================================================================================================================================

*Data Types=>
1) str =  text type
2) int, float, complax = numeric types
3) list, tupel, range = sequence types
4) dict = mapping type
5) set, frozenset = set type
6) bool = boolean type
7) bytes, bytarray, memoryview = binary type
8) none type = nonetype

=============================================================================================================================================

* ''' or """ => using this three double quotes or single quotes at the start and end in varible we can create str data for multipel lines

=============================================================================================================================================

* if statment 

*Print only if "free" is present:

txt = "The best things in life are free!"
if "free" in txt:
  print("Yes, 'free' is present.")
  
*print only if "expensive" is NOT present:

txt = "The best things in life are free!"
if "expensive" not in txt:
  print("No, 'expensive' is NOT present.")
  
============================================================================================================================================
*slice => The first character has 0th index
1) b = "Hello, World!"
print(b[2:5])
in this we get llo l2 l3 o4 it will not return fifth one

2) b = "Hello, World!"
print(b[:5])
this code wil return first 5  letters

*Slice To the End

3) b = "Hello, World!"
print(b[2:])
this code will return llo, World!" 

*Negative Indexing

4) b = "Hello, World!"
print(b[-5:-2])

!is on 0 index w on -5 orl l on -2 d on 1 

=============================================================================================================================================

*Modify Strings  => Methods 
1) v.upper() to make all in uppercase
2) v.lower() to make  all in lowercase
3) v.strip() it will remove  whitespace from starting and ending
4) v.replace() it  will replace the string 
EX a = "Hello, World!"
print(a.replace("H", "G").replace("W", "C")) 
5) v.split()
The split() method splits the string into substrings if it finds instances of the separator:
EX of substrings ['Hello', ' World!']

=============================================================================================================================================

* String Concatenation

1) a = "Hello"
   b = "World"
   c = a + " " +b
 print(c)
 it will  print hello world together with added space
 
============================================================================================================================================

*String Format =>
we can use index numbers {0} to be sure the arguments are placed in the correct placeholders:

we can not combine string and number like this

age = 36
txt = "My name is John, I am " + age ; this is the wrong method

* the correct method is 

name = "sanket"
age = 25
post = "intern"
info = "my name  is {} my age is {} and my post is {}"
print(info.format(name,age,post))

============================================================================================================================================

* Escape Character =>

Code	Result	Try it
\'	Single Quote	
\\	Backslash	
\n	New Line	
\r	Carriage Return	
\t	Tab	
\b	Backspace	
\f	Form Feed	
\ooo	Octal value	
\xhh	Hex value
  
===========================================================================================================================================

* String Methods  =>


  Method	                      Description
capitalize()	Converts the first character to upper case
casefold()	Converts string into lower case
center()	Returns a centered string
count()	        Returns the number of times a specified value occurs in a string
encode()	Returns an encoded version of the string
endswith()	Returns true if the string ends with the specified value
expandtabs()	Sets the tab size of the string
find()	        Searches the string for a specified value and returns the position of where it was found
format()	Formats specified values in a string
format_map()	Formats specified values in a string
index()	        Searches the string for a specified value and returns the position of where it was found
isalnum()	Returns True if all characters in the string are alphanumeric
isalpha()	Returns True if all characters in the string are in the alphabet
isascii()	Returns True if all characters in the string are ascii characters
isdecimal()	Returns True if all characters in the string are decimals
isdigit()	Returns True if all characters in the string are digits
isidentifier()	Returns True if the string is an identifier
islower()	Returns True if all characters in the string are lower case
isnumeric()	Returns True if all characters in the string are numeric
isprintable()	Returns True if all characters in the string are printable
isspace()	Returns True if all characters in the string are whitespaces
istitle()	Returns True if the string follows the rules of a title
isupper()	Returns True if all characters in the string are upper case
join()	        Joins the elements of an iterable to the end of the string
ljust()	        Returns a left justified version of the string
lower() 	Converts a string into lower case
lstrip()	Returns a left trim version of the string
maketrans()	Returns a translation table to be used in translations
partition()	Returns a tuple where the string is parted into three parts
replace()	Returns a string where a specified value is replaced with a specified value
rfind()	        Searches the string for a specified value and returns the last position of where it was found
rindex()	Searches the string for a specified value and returns the last position of where it was found
rjust() 	Returns a right justified version of the string
rpartition()	Returns a tuple where the string is parted into three parts
rsplit()	Splits the string at the specified separator, and returns a list
rstrip()	Returns a right trim version of the string
split() 	Splits the string at the specified separator, and returns a list
splitlines()	Splits the string at line breaks and returns a list
startswith()	Returns true if the string starts with the specified value
strip() 	Returns a trimmed version of the string
swapcase()	Swaps cases, lower case becomes upper case and vice versa
title() 	Converts the first character of each word to upper case
translate()	Returns a translated string
upper()  	Converts a string into upper case
zfill() 	Fills the string with a specified number of 0 values at the beginning 

============================================================================================================================================

* python boolens

The bool() function allows you to evaluate any value, and give you True or False in return,
 
 Evaluate Values and Variables
 Evaluate two variables:

x = "Hello"
y = 15

print(bool(x))
print(bool(y))
in this case both will be true

almost everything is true that are nor empty or 0

following will return False:

bool(False)
bool(None)
bool(0)
bool("")
bool(())
bool([])
bool({})


* we use isinstance() method to chack the  data matched or not if the data type matchs then it will return True if not itss ruturn Flase
 x = 200
  print(isinstance(x, int))







